/*  This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: Linux Blast v1.3
''    Author: Eric Froemling
''    Last Updated: March 29, 2004
''    Update/Change this file at:
''    http://www.highend3d.com/maya/mel/?section=animation#2836
''  
''  History:
''    Linux Blast v1.2 on March 29, 2004 by Eric Froemling
''    Linux Blast v1.1 on March 15, 2004 by Eric Froemling
''    Linux Blast v1.0 on March 15, 2004 by Eric Froemling
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/







//------------------------------------------------------------------------------
//
//  playblasts an animation to mpeg4/divx/etc format, allowing very long/large playblasts
//  also includes the active audio track from the maya timeline (woohoo!)
//
//  - good for lipsync tests or long/large previews
//  that would otherwise run too slowly in fcheck
//
//  this script is targeted at linux where fcheck has been the only option for playblasting,
//  though with some tweaking it could probably work on irix or macosx I would assume.
//
//
//  this script requires the following programs:
//  mencoder (a component of mplayer) for encoding, sox for audio manipulation,
//  and some way to view mpeg4 avi files (mplayer, xine, etc)
//  these are pretty standard fare on a linux install, but they're free/open source
//  so grab them off the net if need be
//
//  USAGE:
//  stick this file in any accessible script directory
//  to add a toolbar button, run the mel command "source linux_blast"
//  or just use the command "linux_blast" to bring up the gui
//
//
//  VERSION HISTORY
//
//  1.3
//   fixed a few last minute gui bugs
//  1.2
//   added a basic gui front end
//  1.1
//   fixed a few minor syntax quibbles
//
//  TODO/WISHLIST:
//  spiffy custom icon or other extraneous niceties
//  a playback method that allows scrubbing or single framing (we need quicktime for linux!)
//  make it so maya doesnt sit and wait for the player to complete
//  so you can keep working with the anim open
//
//  This script may be freely distributed.  Use/modify at your own risk.
//  Feel free to contact me with any bug reports, patches, recommendations, etc.
//
//-----------------------------------------------------------------------------


// does the actual work
global proc do_linux_blast ( int $display_size_source,
								  int $display_width,
								  int $display_height,
								  float $display_scale,
								  int $video_bitrate,
								  int $player)
{
	//-----------------------  CUSTOM SETTINGS ----------------------------

	// print complete output for encoding/viewing commands
	// handy for troubleshooting
	int $verbose = 0;


	// where to store temporary files - all temporary files are deleted after the playblast is run
	// except for "last_linux_playblast.avi" which is the final output
	string $temp_file_location = "/var/tmp/";

	//the image format the playblast initially renders to before converting to mpeg4
	//5 = sgi (more disk space but faster/higher quality) 8 = jpeg (less disk space but lossy and slower)
	$playblast_image_format = 5;


	//mencoder flags - adjust video codec, etc
	string $encoder_flags = ("-ovc lavc -lavcopts vcodec=mpeg4:vbitrate=" + $video_bitrate);

	// viewer command run on the output file
	//for me, mplayer seemed to sync up the sound a bit better though i normally use xine

	string $viewer_command;
	if ($player == 1)
		$viewer_command = "mplayer -fs -loop 0 ";
	else
		$viewer_command = "xine --no-splash --fullscreen --loop=repeat ";

	// ---------------------------------------------------------------------



	// set specific file locations
	string $movie_name = ( $temp_file_location + "last_linux_playblast.avi");
	string $audio_trim_file = ( $temp_file_location + "ecf_audio_trim.wav");
	string $audio_trim_raw_file = ( $temp_file_location + "ecf_audio_raw_1.raw");
	string $audio_trim_raw_file_2 = ( $temp_file_location + "ecf_audio_raw_2.raw");
	string $audio_trim_raw_file_3 = ( $temp_file_location + "ecf_audio_raw_3.raw");


	//make sure they have mencoder and sox (check for a pathname char at beginning of 'which' resul)
	string $mencoder_loc = `system ("which mencoder")`;
	string $sox_loc = `system ("which sox")`;
	if (`substring $mencoder_loc 1 1` != "/"){
		error ("can't find mencoder - this script requires mencoder to function\n");
		return;
	}
	if (`substring $sox_loc 1 1` != "/"){
		error ("can't find sox - this script requires sox to function\n");
		return;
	}

	//see if there's audio in the scene, and if so, grab its filename and start-offset
	global string $gPlayBackSlider;
	string $displayed_sound;
	string $displayed_sound_file;
	float $displayed_sound_offset = 0;
	$displaying_sound = `timeControl -query -displaySound $gPlayBackSlider`;
	if ($displaying_sound){
		$displayed_sound = `timeControl -query -sound $gPlayBackSlider`;
		$displayed_sound_file = `getAttr ($displayed_sound + ".f")`;
		$displayed_sound_offset = `getAttr ($displayed_sound + ".offset")`;
	}

	//see what fps to play at
	$time_unit = `currentUnit -query -time`;
	int $playback_fps = 30;
	if ($time_unit == "game"){
		$playback_fps = 15;
	}
	else if ($time_unit == "film"){
		$playback_fps = 24;
	}
	else if ($time_unit == "pal"){
		$playback_fps = 25;
	}
	else if ($time_unit == "ntsc"){
		$playback_fps = 30;
	}
	else if ($time_unit == "show"){
		$playback_fps = 48;
	}
	else if ($time_unit == "palf"){
		$playback_fps = 50;
	}
	else if ($time_unit == "ntscf"){
		$playback_fps = 60;
	}

	// get playback_times in frames and convert that to seconds
	float $min_time = `playbackOptions -query -minTime`;
	$min_time = $min_time / $playback_fps;
	float $max_time = `playbackOptions -query -maxTime`;
	$max_time = $max_time / $playback_fps;

	// convert the offset to seconds and calculate start and duration time in minutes:seconds
	float $start_offset = $displayed_sound_offset / $playback_fps;
	float $start_time = ($min_time - $start_offset);
	float $start_seconds = ($start_time) % 60;
	int $start_minutes = ($start_time) / 60;

	float $duration_seconds = ($max_time - $min_time) % 60;
	int  $duration_minutes = ($max_time - $min_time) / 60;

	// store old image output settings and set them to what we're using
	$old_output_format = `getAttr defaultRenderGlobals.outf`;
	setAttr "defaultRenderGlobals.outf" $playblast_image_format;


	// do the playblast and get the proper name for the frames it spits out
	string $filename;

	//with no custom display size
	if ($display_size_source != 2){
		$filename =  `playblast -format image -clearCache true -viewer off -percent $display_scale`;
	}
	//with custom display size
	else{
		$filename =  `playblast -format image -clearCache true -viewer off -width $display_width -height $display_height -percent $display_scale`;
	}

	waitCursor -state on;

	// replace numerical placeholders (#) with wildcards (?) for shell completion
	$filename  = substituteAllString($filename, "#", "?");
	print ("linux_blast: encoding \"" + $movie_name + "\" at " + $playback_fps + "fps - please wait...\n");

	// the above print is not visible unless we do this..."
	print "\n";

	// if we have sound, crop or extend it if need be to line up with the video
	string $sound_args = "";
	if ($displaying_sound){
		string $audio_source;

		//the playblast starts before our audio does - add proper amount of silence at beginning
		if (($start_minutes < 0) || ($start_seconds < 0)){

			// argh - we have to convert what sound we need into a raw file, make our own silence raw file, concatenate the two,
			// and convert back into a wav file

			// subtract the silence from our duration and see whats left
			$duration_minutes = $duration_minutes + $start_minutes;
			$duration_seconds = $duration_seconds + $start_seconds;

			// spit out what we need of our sound file as raw data
			// spit out an extra second of audio because there seems to be an issue with it getting cut off early
			$command_string = ("sox -V \"" + $displayed_sound_file + "\" -r 44100 -s -w -c 2 \""
									 + $audio_trim_raw_file_2 + "\" trim 0:0 " + $duration_minutes
									 + ":" + ($duration_seconds + 1) + "");
			if ($verbose) print ($command_string + "\n");
			$command_result = `system($command_string)`;
			if ($verbose) print ($command_result + "\n");

			// spit out needed silence (44100 hz * 2 bytes * 2 channels = 176400/second)
			int $silence_length = 176400 * (-1 * $start_time);

			// hmmm whats an efficient way to spit out a bunch of zeros to a file?
			$command_string = ("head -c " + $silence_length + " /dev/zero > \"" + $audio_trim_raw_file + "\"");
			if ($verbose) print ($command_string + "\n");
			$command_result = `system($command_string)`;
			if ($verbose) print ($command_result + "\n");

			// combine the two
			$command_string = ("cat \"" + $audio_trim_raw_file + "\" \"" + $audio_trim_raw_file_2
									 + "\" > \"" + $audio_trim_raw_file_3 + "\"");
			if ($verbose) print ($command_string + "\n");
			$command_result = `system($command_string)`;
			if ($verbose) print ($command_result + "\n");

			//now convert back to a wav file
			$command_string = ("sox -V  -r 44100 -s -w -c 2 \"" + $audio_trim_raw_file_3 + "\" \"" + $audio_trim_file + "\"");
			if ($verbose) print ($command_string + "\n");
			$command_result = `system($command_string)`;
			if ($verbose) print ($command_result + "\n");

			$audio_source = $audio_trim_file;

		}

		// audio lines up perfectly with the beginning of the playblast - just use the original file - woohoo!
		else if (($start_minutes == 0) && ($start_seconds == 0)){
			$audio_source = $displayed_sound_file;
		}

		// playblast starts after the start of our audio - crop off the beginning
		else{
			$command_string = ("sox \"" + $displayed_sound_file + "\" \"" + $audio_trim_file + "\" trim "
									 + $start_minutes + ":" + $start_seconds + " " + $duration_minutes + ":" + $duration_seconds);
			if ($verbose) print ($command_string + "\n");
			$command_result = `system($command_string)`;
			if ($verbose) print ($command_result + "\n");

			$audio_source = $audio_trim_file;
		}


		$sound_args = "-oac copy -audiofile \"" + $audio_source + "\"";
	}


	//encode
	$command_string = ("mencoder -mf fps="
							 + $playback_fps + " "
							 + $sound_args + " "
							 + $encoder_flags + " -o \""
							 + $movie_name + "\" mf://\"" + $filename + "\"");
	if ($verbose) print ($command_string + "\n");
	$command_result = `system($command_string)`;
	if ($verbose) print ($command_result + "\n");

	//view
	$command_string = ($viewer_command + " \"" + $movie_name + "\"");
	if ($verbose) print ($command_string + "\n");
	$command_result = `system($command_string)`;
	if ($verbose) print ($command_result + "\n");

	//remove all frames
	$command_string =  ("sh -c \"rm \"" + $filename + "\"\"");
	if ($verbose) print ($command_string + "\n");
	$command_result = `system($command_string)`;
	if ($verbose) print ($command_result + "\n");

	//remove our temporary files
	$command_string = ("rm -f \"" + $audio_trim_file + "\" \"" + $audio_trim_raw_file + "\" \""
			 + $audio_trim_raw_file_2 + "\" \"" + $audio_trim_raw_file_3 + "\"");
	if ($verbose) print ($command_string + "\n");
	$command_result = `system($command_string)`;
	if ($verbose) print ($command_result + "\n");

	//restore old output settings
	setAttr "defaultRenderGlobals.outf" $old_output_format;

	print "done.\n";
	waitCursor -state off;

}

// utility function to add a button to the current shelf
global proc linux_blast_setup()
{
	string $button_annotation = "Linux Blast Playblast";

	// create a shelf button on the currently active shelf, removing our old one first
	global string $gShelfTopLevel;
	if( `tabLayout -exists $gShelfTopLevel` ){
		string $selection_tab = ( $gShelfTopLevel + "|" + `tabLayout -q -selectTab $gShelfTopLevel` );
		setParent $selection_tab;
		string $existing_buttons[] = `shelfLayout -q -childArray $selection_tab`;

		for ($i = 0; $i < size($existing_buttons);$i++){
			if( `shelfButton -exists $existing_buttons[$i]` )
				if( `shelfButton -q -annotation $existing_buttons[$i]` == $button_annotation )
					deleteUI ( $existing_buttons[$i] );
		}
		shelfButton -annotation $button_annotation
			-image1 "render.xpm"
			-label "linux_blast"
			-command ("linux_blast();")
			-doubleClickCommand ("$linux_blast_skip_gui = 1");
	}

}

global proc linux_blast_display_size_menu_cb(string $tab_layout)
{
	setParent $tab_layout;

	int $option = `optionMenuGrp -query -select display_size_menu`;
	switch ($option) {
	case 1:	// From window
		intFieldGrp -edit -enable false display_size_field;
		break;
	case 2:	// Custom
		intFieldGrp -edit -enable true display_size_field;
		break;
	}
}

//run the gui
global proc linux_blast2()
{

	//if they want us to skip the gui, we've already got a window (we assume)
	// just go ahead and tell it to run
	global int $linux_blast_skip_gui;
	if ($linux_blast_skip_gui){
		$linux_blast_skip_gui = 0;
		linux_blast_callback(true);
		return;
	}

	string $window_title = "Linux Blast Options";

	//this should be false for final release
	int $developing = true;


	if ($developing && `window -exists linblast`){
		deleteUI linblast;
	}

	//make the window
	if (!`window -exists linblast`){
		window -title $window_title linblast;

		//windowPref linblast;
/* 		$poo = `windowPref -query -topLeftCorner linblast`; */
/* 		$poo2 = `windowPref -q -wh linblast`; */
		columnLayout -columnAttach "both" 12
			-rowSpacing 2
			-columnWidth 440;
		{
			text -label "Note: double-click the toolbar icon to skip this window"
				-align "center"
				-font "plainLabelFont";
			separator -style "in";

			intSliderGrp -label "Compression Bitrate"
				-value 5000
				-field true
				-minValue 10 -maxValue 10000
				-fieldMinValue 0 -fieldMaxValue 100000
				video_bitrate_slider;

			separator -style "in";

			//custom size
			optionMenuGrp -label "Capture Size"
				-changeCommand ("linux_blast_display_size_menu_cb linblast")
				display_size_menu;
			menuItem -label "From Window";
			menuItem -label "Custom";
			setParent -menu ..;
			intFieldGrp -label ""
				-numberOfFields 2
				display_size_field;

			//scale slider
			floatSliderGrp -label "Scale"
				-value 0.25
				-field true
				-minValue 0.1 -maxValue 1 -precision 2 display_scale;
			separator -style "in";

			//player menu
			optionMenuGrp -label "Playback With"
				viewer_menu;
			menuItem -label "mplayer";
			menuItem -label "xine";
			setParent -menu ..;

			separator -style "in";

			rowLayout -numberOfColumns 3 -columnWidth3 133 134 133
				-columnAttach 1 "both" 5
				-columnAttach 2 "both" 5
				-columnAttach 3 "both" 5;
			{
				button -al center -command "linux_blast_callback true" "LinuxBlast";
				button -al center -command "linux_blast_setup_window \"\" true" "Defaults";
				button -al center -command "linux_blast_close" "Close";
			}
		}
	}

	//set our values to whats saved and show ourself
	linux_blast_setup_window("linblast",false);

	showWindow linblast;

}

//sets our option vars to default values if they don't exist or if force is true
proc set_option_vars (int $force_factory_settings)
{
	if( $force_factory_settings || !`optionVar -exists linuxblastWidth`) {
		optionVar -intValue linuxblastWidth 0;
	}
	if( $force_factory_settings || !`optionVar -exists linuxblastHeight`) {
		optionVar -intValue linuxblastHeight 0;
	}
	if( $force_factory_settings || !`optionVar -exists linuxblastSizeSource`) {
		optionVar -intValue linuxblastSizeSource 1;
	}
	if( $force_factory_settings || !`optionVar -exists linuxblastScale`) {
		optionVar -floatValue linuxblastScale 0.5;
	}
	if( $force_factory_settings || !`optionVar -exists linuxblastBitrate`) {
		optionVar -intValue linuxblastBitrate 5000;
	}
	if( $force_factory_settings || !`optionVar -exists linuxblastPlayback`) {
		optionVar -intValue linuxblastPlayback 1;
	}

}

//set the existing window's control values from currently stored preferences
global proc linux_blast_setup_window(string $parent, int $force_factory_settings)
{
	if (!`window -exists linblast`)
		return;

	set_option_vars($force_factory_settings);

	//grab our saved preferences
	int $display_width = `optionVar -query linuxblastWidth`;
	int $display_height = `optionVar -query linuxblastHeight`;
	int $display_size_source = `optionVar -query linuxblastSizeSource`;
	intFieldGrp -edit
		-value1 $display_width
		-value2 $display_height
		display_size_field;
	optionMenuGrp -edit -select $display_size_source display_size_menu;
	linux_blast_display_size_menu_cb `setParent -q`;

	float $display_scale = `optionVar -query linuxblastScale`;
	floatSliderGrp -e -value $display_scale display_scale;

	int $video_bitrate = `optionVar -query linuxblastBitrate`;
	intSliderGrp -e -value $video_bitrate video_bitrate_slider;

	int $playback_with = `optionVar -query linuxblastPlayback`;
	optionMenuGrp -edit -select $playback_with viewer_menu;
}

proc string assemble_command()
{
	string $command = ("do_linux_blast " +
		`optionVar -query linuxblastSizeSource` + " " +
		`optionVar -query linuxblastWidth` + " " +
		`optionVar -query linuxblastHeight` + " " +
		(100 * `optionVar -query linuxblastScale`) + " " +
		`optionVar -query linuxblastBitrate` + " " +
		`optionVar -query linuxblastPlayback`);
	return $command;

}


//pull the current settings from the gui and save them, and then execute the command
//with the proper arguments
global proc linux_blast_callback( int $do_it)
{
	int $display_size_source = `optionMenuGrp -query -select display_size_menu`;
	optionVar -intValue linuxblastSizeSource $display_size_source;

	//custom size
	if ($display_size_source == 2){
		int  $display_width = `intFieldGrp -query -value1 display_size_field`;
		int  $display_height = `intFieldGrp -query -value2 display_size_field`;
		optionVar -intValue linuxblastWidth $display_width;
		optionVar -intValue linuxblastHeight $display_height;
	}

	//scale
	float $scale = `floatSliderGrp -q -value display_scale`;
	optionVar -floatValue linuxblastScale $scale;

	//bitrate
	int $bitrate = `intSliderGrp -q -value video_bitrate_slider`;
	optionVar -intValue linuxblastBitrate $bitrate;

	//player
	int $player = `optionMenuGrp -query -select viewer_menu`;
	optionVar -intValue linuxblastPlayback $player;

	string $command = `assemble_command`;
	linux_blast_close();
	eval $command;
}


//closes the window
global proc linux_blast_close()
{
	if (`window -exists linblast`){
		deleteUI linblast;
	}

}

//when the source us we add our icon
linux_blast_setup();
