// $Revision: #41 $ $Date: 2007/06/22 $
//
// Copyright (c) 2006 PIXAR.  All rights reserved.  This program or
// documentation contains proprietary confidential information and trade
// secrets of PIXAR.  Reverse engineering of object code is prohibited.
// Use of copyright notice is precautionary and does not imply
// publication.
//
//                      RESTRICTED RIGHTS NOTICE
//
// Use, duplication, or disclosure by the Government is subject to the
// following restrictions:  For civilian agencies, subparagraphs (a) through
// (d) of the Commercial Computer Software--Restricted Rights clause at
// 52.227-19 of the FAR; and, for units of the Department of Defense, DoD
// Supplement to the FAR, clause 52.227-7013 (c)(1)(ii), Rights in
// Technical Data and Computer Software.
//
// Pixar Animation Studios
// 1200 Park Avenue
// Emeryville, CA  94608
//

proc string genJobCleanupScript()
{
    string $taskStr;
    string $indent = "    ";
    int $jdc = `rmanGetDataCleanupJob`;
    int $jtc = `rmanGetTextureCleanupJob`;
    int $jrc = `rmanGetRibCleanupJob`;
    int $jsc = `rmanGetShaderCleanup`;
    if( $jdc || $jtc || $jrc || $jsc ) {
	$taskStr += (" -cleanup {\n");

	if( $jdc ) {
	    string $dir = `eval("rman ctxGetDataDir" )`;
	    if( $dir != "" )
		$taskStr += ($indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	if( $jtc ) {
	    string $dir = `eval("rman ctxGetTextureDir" )`;
	    if( $dir != "" )
		$taskStr += ($indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	if( $jrc ) {
	    string $dir = `eval("rman ctxGetRibDir" )`;
	    if( $dir != "" )
		$taskStr += ($indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	if( $jsc ) {
	    string $dir = `eval("rman ctxGetShaderDir" )`;
	    if( $dir != "" )
		$taskStr += ($indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	$taskStr += ("}\n");
    }
    return $taskStr;
}

proc string genFrameCleanupScript( int $frame )
{
    string $taskStr;
    string $indent = "    ";
    int $fdc = `rmanGetDataCleanupFrame`;
    int $ftc = `rmanGetTextureCleanupFrame`;
    int $frc = `rmanGetRibCleanupFrame`;
    if( $fdc || $ftc || $frc ) {
	$taskStr += (" -cleanup {\n");
	if( $fdc ) {
	    string $dir = `eval("rman ctxGetDataDir -frame "+ $frame )`;
	    if( $dir != "" )
		$taskStr += ($indent+$indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	if( $ftc ) {
	    string $dir = `eval("rman ctxGetTextureDir -frame "+ $frame )`;
	    if( $dir != "" )
		$taskStr += ($indent+$indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	if( $frc ) {
	    string $dir = `eval("rman ctxGetRibDir -frame "+ $frame )`;
	    if( $dir != "" )
		$taskStr += ($indent+$indent+"    Cmd {Alfred} -msg {File delete \""+$dir+"\"}\n");
	}
	$taskStr += ("}\n");
    }
    return $taskStr;
}

proc string genSubframeAlfredScript( string $phase, int $depth, int $frame, string $cmdType, string $renderCmd ) {
    string $renderArgs = "";
    if( `optionVar -exists "rmanAlfredRenderArgs"` ) {
	$renderArgs = " " + `optionVar -query "rmanAlfredRenderArgs"`;
    }
    string $indent = "    ";
    for( $k=0; $k < $depth; $k++ ) {
	$indent += "    ";
    }

    string $fpattr = `rmanGetAttrName "ribFullPaths"`;
    string $globals = `rmanGetGlobals`;
    int $fullpaths = 0;
    if( `attributeExists $fpattr $globals` ) {
	$fullpaths = `getAttr ($globals + "." + $fpattr)`;
    }

    int $f;
    int $start = $frame;
    int $stop = $frame+1;
    int $repeats = `eval("rman ctxGetPhaseRepeats \""+$phase+"\"")`;
    if( $repeats ) {
	$start = `eval("rman ctxGetStartFrame \""+$phase+"\"")`;
	$stop = `eval("rman ctxGetStopFrame \""+$phase+"\"")`;
	$stop++;
    }
    string $taskStr = "";
    for( $f=$start; $f < $stop; $f++ ) {

	int $d = `eval("rman ctxGetPhaseDepth \""+$phase+"\"")`;
	string $phases[] = `eval("rman ctxGetPhases -phase \""+$phase+"\"")`;
	string $tasks[] = `eval("rman ctxGetTasks -phase \""+$phase+"\"")`;
	int $numsubphases = `size($phases)`;
	int $numtasks = `size($tasks)`;
	string $title;
	string $cleanupStr = "";
	for( $j=0; $j<$numsubphases; $j++ ) {

	    string $subtaskStr = genSubframeAlfredScript($phases[$j], $depth+1, $f, $cmdType, $renderCmd);
	    if( size($subtaskStr) ) {
		string $buf[];
		tokenize($phases[$j], "/", $buf);
		$title = ($buf[size($buf)-1]);
		$taskStr += ( "\n" );
		if( $repeats ) {
		    $taskStr += ($indent+"Task {" +$title+ " " + $f+"}");
		} else {
		    $taskStr += ($indent+"Task {" +$title+ "}");
		}
		string $subtasks[] = `eval("rman ctxGetTasks -phase \""+$phases[$j]+"\"")`;
		int $pd = `eval("rman ctxGetPhaseDepth \""+$phases[$j]+"\"")`;
		if( $pd > 0 ) {
		    $taskStr += (" -serialsubtasks 1");
		}
		$taskStr += ( " -subtasks {\n" +
			    $subtaskStr+
			    $indent+"}");

	    }

	    if( $phases[$j] == "/Job/Frames/Cleanup" ) {
		$taskStr += ( $indent + `genFrameCleanupScript $f`);
	    }
	}


 	if( $numtasks > 0 ) {
	    int $foundrib = 0;
	    for( $i=0; $i<=$d; $i++ ) {
		string $dtaskStr = "";
		string $tasks[] = `eval("rman ctxGetTasks -phase \"" +$phase+"\" -depth " +$i)`;
		int $numtasks = `size($tasks)`;
		if( $numtasks > 0 ) {

		    for( $j=0; $j<$numtasks; $j++ ) {
			string $ribfile;
			if( `gmatch $phase "*Preflight*"` ) {
			    if( $fullpaths ) {
				$ribfile = `eval("rman ctxGetRibFile -task \""+$tasks[$j] + "\" -fullpath")`;
			    } else {
				$ribfile = `eval("rman ctxGetRibFile -task \""+$tasks[$j] + "\"")`;
			    }
			} else {
			    if( $fullpaths ) {
				$ribfile = `eval("rman ctxGetRibFile -task \""+$tasks[$j] +"\" -frame "+$f+" -fullpath")`;
			    } else {
				$ribfile = `eval("rman ctxGetRibFile -task \""+$tasks[$j] +"\" -frame "+$f)`;
			    }
			}
			if( size($ribfile) ) {
			    $foundrib = 1;
			    $dtaskStr += ( "\n" );
			    $dtaskStr += ($indent+"    Task {" +$tasks[$j]+" " + $frame +"} -cmds {\n");
			    $dtaskStr += ($indent+"        "+$cmdType+" {"+$renderCmd+$renderArgs+" \""+$ribfile+"\"}\n");
			    $dtaskStr += ($indent +"    }");
			    string $imgfile;
			    if( `gmatch $phase "*Preflight*"` ) {
				$imgfile = `eval("rman ctxGetImageFile -task \""+$tasks[$j]+"\" -fullpath")`;
			    } else {
				$imgfile = `eval("rman ctxGetImageFile \""+$tasks[$j]+"\" -frame "+$f+" -fullpath")`;
			    }
			    if( size($imgfile) ) {
				$dtaskStr += (" -preview {sho \"" + $imgfile+"\"}");
			    }
			    $dtaskStr += "\n"; 
			}
		    }
		    if( $dtaskStr != "" ) {
			if( $d > 0 ) {
			    $taskStr += ($indent+"Task {"+$title+" Depth " +$i+"} -subtasks {\n");
			}
			$taskStr += $dtaskStr;
			if( $d > 0 ) {
			    $taskStr += "}\n";
			}
		    }
		}
	    }
 	}
    }
    return $taskStr;
}

proc string genFrameAlfredScript( string $phase, string $layer, int $frame, string $cmdType, string $renderCmd )
{
    string $renderArgs = "";
    if( `optionVar -exists "rmanAlfredRenderArgs"` ) {
	$renderArgs = " " + `optionVar -query "rmanAlfredRenderArgs"`;
    }
    string $taskStr = "";

    string $fpattr = `rmanGetAttrName "ribFullPaths"`;
    string $globals = `rmanGetGlobals`;
    int $fullpaths = 0;
    if( `attributeExists $fpattr $globals` ) {
	$fullpaths = `getAttr ($globals + "." + $fpattr)`;
    }

    int $repeats = `eval("rman ctxGetPhaseRepeats \""+$phase+"\"")`;
    int $start = $frame;
    int $stop = $frame+1;
    int $by = 1;
    if( $repeats ) {
	$start = `eval("rman ctxGetStartFrame \""+$phase+"\"")`;
	$stop = `eval("rman ctxGetStopFrame \""+$phase+"\"")`;
	$by = `eval("rman ctxGetByFrame \""+$phase+"\"")`;
	$stop++;
    }
    string $indent = "";

    for( $f=$start; $f < $stop; $f=$f+$by ) {
	if( $repeats ) {
	    string $ribfileref, $ribfile;	    
	    string $title="";
	    if( `gmatch $phase "*Preflight*"` ) {
		$ribfile = `eval("rman ctxGetRibFile -fullpath")`;
		if( $fullpaths ) {
		    $ribfileref = $ribfile;
		} else {
		    $ribfileref = `eval("rman ctxGetRibFile")`;
		}
		if( $layer != "" ) {
		    $title += ($layer + " ");
		}
		$title += "Preflight";
	    } else {
		$ribfile = `eval("rman ctxGetRibFile -frame "+$f+" -fullpath")`;
		if( $fullpaths ) {
		    $ribfileref = $ribfile;
		} else {
		    $ribfileref = `eval("rman ctxGetRibFile -frame "+$f)`;
		}
		if( $layer != "" ) {
		    $title += ($layer + " ");
		}
		$title += ("Frame " + $f);
	    }
	    if( `filetest -r $ribfile` ) {
		$taskStr += ("\n");
		$taskStr += ($indent+"    Task {"+$title+"} -cmds {\n");
		$taskStr += ($indent+"        "+$cmdType+" {"+$renderCmd+$renderArgs+" \"%D("+$ribfileref+")\"}\n");
		$taskStr += ($indent +"    }");
		
		string $tasks[] = `eval("rman ctxGetTasks")`;
		string $imgfiles[];
		$j=0;
		for( $i=0; $i<size($tasks); $i++ ) {
		    string $imgfile = `eval("rman ctxGetImageFile \"" +$tasks[$i]+"\" -frame "+$f+" -fullpath")`;
		    if( size($imgfile) ) {
			$imgfiles[$j] = $imgfile;
			$j++;
		    }
		}
		if( size($imgfiles) ) {
		    $taskStr += (" -preview {sho ");
		    for( $i=0; $i<size($imgfiles); $i++ ) {
			$taskStr += ("\""+$imgfiles[$i]+"\"" + " ");
		    }
		    $taskStr += "}";
		}
	    }
	    if( `gmatch $phase "*Preflight*"` == 0 ) {
		$taskStr += ( $indent + `genFrameCleanupScript $f`);
	    }
	}
	
	string $phases[] = `eval("rman ctxGetPhases -phase \""+$phase+"\"")`;
	for( $i=0; $i<size($phases); $i++ ) {
	    string $subtaskStr = genFrameAlfredScript( $phases[$i], $layer, $f, $cmdType, $renderCmd );
	    if( size($subtaskStr) ) {
		string $title="";
		string $buf[];
		tokenize($phases[$i], "/", $buf);
		if( $layer != "" ) {
		    $title += ($layer + " ");
		}
		if( `gmatch $phase "*Frames*"` ) {
		    $title += ($buf[size($buf)-1] + " " + $f);
		} else {
		    $title += ($buf[size($buf)-1]);
		}
		$taskStr += "\n";
		$taskStr += ($indent+"Task {" +$title+"} -serialsubtasks 1 -subtasks {\n" + $subtaskStr);
		
		$taskStr += ($indent+"}");
		
	    }
	}
    }
    return $taskStr;
}

proc string genLayerAlfredScript( string $phase, int $frame, string $cmdType, string $renderCmd )
{
    string $taskStr = "";
    string $renderLayers[]; clear($renderLayers);
    $renderLayers = `listConnections renderLayerManager.renderLayerId`;
    int $i;
    int $numLayers = size($renderLayers);
    for( $i=0; $i<$numLayers; $i++ ) {
	string $layer = $renderLayers[$i];
	if( !`getAttr ($layer + ".renderable")` ) {
	    continue;
	}
	if( $numLayers == 1 ) {
	    $layer = "";
	}
	if( $numLayers > 1 ) {
	    eval("rman ctxClose");
	    eval("rman ctxOpen -rib -layer " + $layer);
	}
	$taskStr += genFrameAlfredScript($phase, $layer, $frame, $cmdType, $renderCmd);
    }
    return $taskStr;
}

proc string stashScene()
{
    // generate an id - a combinitaion of maya's pid and random number
    string $scene = `rmanGetSceneName`;

    if(!attributeExists("tmpSceneName", "renderManGlobals"))
	addAttr -dt "string" -ln "tmpSceneName" renderManGlobals;
    setAttr -type "string" renderManGlobals.tmpSceneName $scene;

    string $imgFilePrefix = `getAttr defaultRenderGlobals.imageFilePrefix`;
    string $tmpImgFilePrefix;
    if( size($imgFilePrefix) == 0)
    {
	setAttr -type "string" defaultRenderGlobals.imageFilePrefix $scene;
    }
    else
    {
	$tmpImgFilePrefix = `substitute "<Scene>" $imgFilePrefix $scene`;
    }

    int $nthreads = 0;
    int $origthreads = 0;
    if( `optionVar -exists "rmanNumBatchThreads"` ) {
	$nthreads = `optionVar -query "rmanNumBatchThreads"`;
	string $globals = `rmanGetGlobals`;
	string $tattr = `rmanGetAttrName "limits:threads"`;
	$origthreads = `rmanGetAttr $globals $tattr`;
	rmanSetGlobalAttr "limits:threads" $nthreads;
    }


    string $id = `getpid`;
    int $rn = `rand 1000`;
    $id += `floor $rn`;
    string $projDir = `workspace -q -rootDirectory`;
    // insert an underscore so maya doesn't automatically delete the file on us
    string $tmpFileName = ($projDir + "/renderScenes/" + "_"+$scene + "_" + $id);
    string $filetype[] = `file -q -type`;
    $tmpFileName = `file -type $filetype[0] -ea $tmpFileName`;

    setAttr -type "string" defaultRenderGlobals.imageFilePrefix $imgFilePrefix;
    deleteAttr renderManGlobals.tmpSceneName;
    if( $origthreads != 0 )
	rmanSetGlobalAttr "limits:threads" $origthreads;

    return $tmpFileName;
}

proc string uncToLower(string $path) {
    string $result = $path;
    if(`about -nt`) {
	if( `match "//*" $path` == "//" ) {
		string $tmp = `substring $path 1 3`;
		$tmp = `tolower $tmp`;
		int $len = `size($path)`;
		string $tmp2 = `substring $path 4 $len`;
		$result = ($tmp + $tmp2);
	}
    }
    return $result;
}

proc string genPreviewChaser(int $isPreflight, int $start, int $end, int $by, string $shoCmd)
{
    // chaser for previewing images
    string $scriptStr = "";

    int $ctxIsOpen = `eval("rman ctxIsOpen")`;
    if( $ctxIsOpen ) {
	string $tasks[] = `eval("rman ctxGetTasks")`;
	string $imgfiles[];
	
	int $j=0, $k=0, $l=0;
	for( $j=0; $j<size($tasks); $j++ ) {
	    string $imgfile="";
	    if( $isPreflight ) {
		$imgfile = `eval("rman ctxGetImageFile \""+$tasks[$j]+"\" -preflight -fullpath")`;
		if( size($imgfile) ) {
		    $imgfiles[$k] = $imgfile;
		    $k++;
		}
	    } else {
		for( $l=$start; $l<=$end; $l=$l+$by ) {
		    $imgfile = `eval("rman ctxGetImageFile \""+$tasks[$j]+"\" -frame "+$l+" -fullpath")`;
		    if( size($imgfile) ) {
			$imgfiles[$k] = $imgfile;
			$k++;
		    }
		}
	    }
	}
	if( size($imgfiles) ) {
	    $scriptStr += (" -preview {"+$shoCmd+" ");
	    for( $j=0; $j<size($imgfiles); $j++ ) {
		$scriptStr += ("\""+$imgfiles[$j]+"\"" + " ");
	    }
	    $scriptStr += "}";
	}
    } else {
	// todo: use sho for sequence here instead of fcheck
	string $imageDir = rmanGetImageDir();
	string $imageName = rmanGetImageName(0);
	$imageName = `substituteAllString $imageName "0" "@"`;

	$scriptStr += (" -preview \{\n");
	if( `about -nt` ) {
	    $imageDir = `substituteAllString $imageDir "/" "\\\\"`;
	    $scriptStr += ("        fcheck ");
	    if( $end > $start ) {
		$scriptStr += (" -n " + $start + " " + $end + " " + $by);
	    }
	    $scriptStr += (" \"" +$imageDir + "\\\\" + $imageName + "\"");
	} else {
	    $scriptStr += ("        fcheck -n " + $start +
			 " " + $end + " " + $by + " " + $imageDir + "/" + 
			 $imageName + "");	    
	}
	$scriptStr += "}";
    }
    return $scriptStr;
}

proc string genGenribTask(string $layer, int $jpf,
			  int $remoteribgen,
			  int $anim, int $start, int $end, string $sceneFile)
{
    string $proj = `workspace -q -fn`;
    string $title = "Generate RIB";
    string $scriptStr = "";

    if( $layer != "" && $layer != "defaultRenderLayer" ) {
	$title += (" " +$layer);
    }

    if( $jpf == 1 ) { // preflight
	$scriptStr += ("      Task -title {"+$title+" Preflight} -cmds \{\n");
	$e = $start;
    } else if( $anim ) {
	$scriptStr += ("      Task -title {"+$title+" " + 
		       $start + "-" + $end +"} -cmds \{\n");
    } else {
	$scriptStr += ("      Task -title {"+$title+" " + 
		       $start+"} -cmds \{\n");
	$e = $start;
    }

    string $buf[] = `eval("rman getPref RIBGenSvc")`;
    string $ribgenSvc = `stringArrayToString $buf " "`;

    string $ribgenCmd = "Cmd";
    string $mayabatch = "maya -batch";
    if( `about -nt` )
	$mayabatch = "mayabatch";
    if( $remoteribgen ) {
	$ribgenCmd = "RemoteCmd -service {"+$ribgenSvc+"}";
	$mayabatch = "%D(maya -batch)";
    }
	    
    $proj = `uncToLower $proj`;
	    
    $scriptStr += "        "+$ribgenCmd+" {"+$mayabatch+" -prompt ";
    $scriptStr += ("-proj \"%D("+$proj+
			   
		   ")\" -command \"loadPlugin RenderMan_for_Maya\" -file \"%D("+
		   $sceneFile+
		   ")\"} \\\n            -tags {intensive} \\\n            -msg {renderManBatchGenRibForLayer(\""+$layer+"\","+$start+","+$end+","+$jpf+"); rmanAlfDoneMsg();}\n");
    $scriptStr += ("      }\n");

    return $scriptStr;
}

proc string genExtRenderTask(string $layer, int $isPreflight, int $frame, 
			  int $fullpaths,
			  string $cmdType,
			  string $renderCmd, string $renderSvc,
			  string $shoCmd)
{
    string $ribfile;
    string $title = "Render";
    string $scriptStr = "";
    if( $layer != "" && $layer != "defaultRenderLayer" ) {
	$title += (" " + $layer);
    }
	
    if( $isPreflight ) {
	if( $fullpaths ) {
	    $ribfile = `eval("rman ctxGetRibFile -preflight -fullpath")`;
	} else {
	    $ribfile = `eval("rman ctxGetRibFile -preflight")`;
	}
	$scriptStr += ("      Task -title {"+$title+" Preflight } -cmds \{\n");
    } else {
	if( $fullpaths ) {
	    $ribfile = `eval("rman ctxGetRibFile -frame "+$frame+" -fullpath")`;
	} else {
	    $ribfile = `eval("rman ctxGetRibFile -frame "+$frame)`;
	}
	$scriptStr += ("      Task -title {"+$title+" Frame " + $frame + "} -cmds \{\n");
    }
    string $execdir = `workspace -q -rootDirectory`;
    $execdir = `uncToLower $execdir`;
    $scriptStr += ("        "+$cmdType+" {"+$renderCmd+" -cwd \"%D(" + $execdir +")\" \"%D(" + $ribfile + ")\"} -service {"+$renderSvc+"}");
    
    $scriptStr += ("\n      }");

    $scriptStr += genPreviewChaser($isPreflight, $frame, $frame, 1, $shoCmd);

    return $scriptStr;
}

proc string genIntRenderTask(int $jpf,
			     int $anim, int $start, int $end, int $by, 
			     string $cmdType, string $shoCmd, 
			     string $sceneFile)
{
    string $scriptStr="";
    string $title="";
    if( $anim ) {
	$title = ("Render Frames " + $start + "-" + $end);
    } else {
	$title = ("Render Frame " + $start);
    }
    if( $jpf == 1 ) {
	$title = ("Preflight");
    }
    if( $jpf == 3 ) {
	$title = ("Cleanup");
    }
    $scriptStr += ("\n    Task -title {" + $title + "} -cmds \{\n");

    string $proj = `workspace -q -fn`;
    $proj = `uncToLower $proj`;
    string $imageName = rmanGetImageName(0);
    $imageName = `substituteAllString $imageName "0" "@"`;
    string $imageDir = rmanGetImageDir();
    string $buf[] = `eval("rman getPref RIBGenSvc")`;
    string $ribgenSvc = `stringArrayToString $buf " "`;
    string $cmdTail = "-service {"+$ribgenSvc+"}";

    string $renderCmd = "%D(maya -batch) -command ";
    if( $cmdType == "Cmd") {
	if( `about -nt` ) {
	    $renderCmd = "mayabatch -command ";
	} else {
	    $renderCmd = "maya -batch -command ";
	}
    }
    $renderCmd += ("\"renderManBatchRenderScript("+$anim+","+$start+","+$end+","+$by+","+$jpf+")\"");
    $renderCmd += (" -file {%D(" + $sceneFile + ")}");
    $renderCmd += (" -proj {%D(" + $proj + ")}");
    if( `optionVar -exists "rmanAlfredRenderArgs"` ) {
	$renderCmd += (" " + `optionVar -query "rmanAlfredRenderArgs"`);
    }

    $scriptStr += ("        " + $cmdType + " {" + $renderCmd + "} " +
		   $cmdTail);

    int $isPreflight=0;
    if( $jpf == 1 ) {
	$isPreflight = 1;
    }

    $scriptStr += ("\n      }");
    if( $jpf == 2 || $jpf == 0 ) {
	$scriptStr += genPreviewChaser($isPreflight, $start, $end, $by, $shoCmd);
    }
    return $scriptStr;
}

proc string genRPSAlfredScript(int $chunk, string $cmdType,
			       int $remoteribgen,
			       int $internalRender)
{
    string $scriptStr = "";
    string $sceneFile = `stashScene`;
    $sceneFile = `uncToLower $sceneFile`;
    int $anim = `getAttr "defaultRenderGlobals.animation"`;
    int $start = `getAttr "defaultRenderGlobals.startFrame"`;
    int $end = `getAttr "defaultRenderGlobals.endFrame"`;
    int $by = `getAttr "defaultRenderGlobals.byFrameStep"`;
    if( $by == 0 )
	$by = 1;
    int $pad = `getAttr "defaultRenderGlobals.extensionPadding"`;
    if( !$anim ) {
	$start = `currentTime -q`;
    }

    string $fpattr = `rmanGetAttrName "ribFullPaths"`;
    string $globals = `rmanGetGlobals`;
    int $fullpaths = 0;
    if( `attributeExists $fpattr $globals` ) {
	$fullpaths = `getAttr ($globals + "." + $fpattr)`;
    }

    string $buf[] = `eval("rman getPref RemoteRenderCmd")`;
    string $renderCmd = `stringArrayToString $buf " "`;
    int $nthreads = 0;
    if( `optionVar -exists "rmanNumBatchThreads"` ) {
	$nthreads = `optionVar -query "rmanNumBatchThreads"`;
	$renderCmd = `substitute "-t:0" $renderCmd ("-t:"+$nthreads)`;
    }

    $buf = `eval("rman getPref RemoteRenderSvc")`;
    string $renderSvc = `stringArrayToString $buf " "`;
    $buf = `eval("rman getPref ShoCmd")`;
    string $shoCmd = `stringArrayToString $buf " "`;

    int $frame;
    int $last = $start+1;
    if( $anim && $end > $start ) {
	$last = $end;
    } else {
	$anim = 0;
    }
    int $dochunking = 0;

    // only chunk remote commands
    if( $cmdType == "Cmd") {
	if( !$anim )
	    $last = $start+1;
    } else if( $anim && $chunk < ($end - $start) ) {
	$dochunking = 1;
    }

    // 0: none
    // 1: preflight
    // 2: frame
    // 3: cleanup
    int $jobphasefilter = 0;

    string $title;
    $title = ("Frames " + $start + "-" + $last);
    if( !$anim ) {
	$title = ("Frame " + $start);
    }

    $scriptStr += ("  Task -title {" + $title + "} -serialsubtasks 1 -subtasks \{\n");

    string $renderLayers[]; clear($renderLayers);
    if( !$internalRender ) {
	// internal renders already deal with render layers
	$renderLayers = `listConnections renderLayerManager.renderLayerId`;
	// switch to defaultRenderLayer
	editRenderLayerGlobals -currentRenderLayer $renderLayers[0];
	// execute pre mel script
	string $melScript = `getAttr defaultRenderGlobals.preMel`;
	if( $melScript != "" ) eval $melScript;

    } else {
	$renderLayers[0] = "defaultRenderLayer";
    }
    int $i;
    int $numLayers = size($renderLayers);

    for( $i=0; $i<$numLayers; $i++ ) {
	string $layer = $renderLayers[$i];
	if( $layer == "defaultRenderLayer" )
	    $layer = "";
	if( !$internalRender && 
	    !`getAttr ($renderLayers[$i] + ".renderable")` ) {
	    continue;
	}

	if( !$internalRender ) {
	    // switch to the layer
	    editRenderLayerGlobals -currentRenderLayer $renderLayers[$i];
	}

	if( $numLayers > 1 ) {
	    eval("rman ctxClose");
	    eval("rman ctxOpen -rib -layer " + $layer);
	}


	if( $dochunking ) {
	    int $isPreflight=1;
	    $jobphasefilter = 1;
	    if( $internalRender ) {
		$scriptStr += genIntRenderTask($jobphasefilter,
					       $anim,
					       $start,
					       $end,
					       $by,
					       $cmdType,
					       $shoCmd,
					       $sceneFile);
	    } else {
		$title = ($layer + " ");
		$title += "Preflight";
		$scriptStr += ("\n    Task -title {" + $title + "} -serialsubtasks 1 -subtasks \{\n");

		$scriptStr += genGenribTask($layer,
					    $jobphasefilter,
					    $remoteribgen,
					    $anim, 
					    $start,$end,
					    $sceneFile);
		
		$scriptStr += genExtRenderTask($layer, 
					       $isPreflight,
					       0,
					       $fullpaths,
					       $cmdType,
					       $renderCmd, 
					       $renderSvc,
					       $shoCmd);
		$scriptStr += ("    \}\n");
	    }
	}
	

	$title = ($layer + " ");
	if( $anim ) {
	    $title += ("Frames " + $start + "-" + $last);
	} else {
	    $title += ("Frame " + $start);
	}
	$scriptStr += ("\n    Task -title {" + $title + "} -serialsubtasks 0 -subtasks \{\n");

	if(!$anim) {
	    $last = $start;
	}

	for( $frame=$start; $frame <= $last; $frame = $frame+($chunk*$by) ) {
	    int $e = $frame + ($chunk*$by) - $by;
	    if( $e > $last ) {
		$e = $last;
	    }
	    if( !$dochunking ) {
		$e = $last;
		if( $frame > $start )
		    break;
	    }


	    $jobphasefilter = 0;
	    if( $dochunking ) {
		$jobphasefilter = 2; // frames
	    } else {
		$jobphasefilter = 0; // none
	    }		    

	    if( $internalRender ) {
		// Generate internal render task for frame range
		$scriptStr += genIntRenderTask($jobphasefilter,
					       $anim,
					       $frame, 
					       $e, 
					       $by, 
					       $cmdType,
					       $shoCmd,
					       $sceneFile);
	    } else {
		$title = ($layer + " ");

		if( $anim ) {
		    $title += ("Frames " + $frame + "-" + $e);
		} else {
		    $title += ("Frame " + $frame);
		}
		$scriptStr += ("\n    Task -title {" + $title + "} -serialsubtasks 1 -subtasks \{\n");

		$scriptStr += genGenribTask($layer,
					    $jobphasefilter,
					    $remoteribgen,
					    $anim, 
					    $frame,
					    $e,
					    $sceneFile);


		$title = "Render";
		$title += (" " +$layer);
		
		if( $anim ) {
		    $scriptStr += ("      Task -title {"+$title+" " + $frame + "-" + $e + "} -serialsubtasks 0 -subtasks \{\n");
		}

		// Generate external render task for each frame
		int $i;
		for( $i=$frame; $i<=$e; $i=$i+$by ) {
		    $scriptStr += genExtRenderTask($layer, 
						   0,
						   $i,
						   $fullpaths,
						   $cmdType,
						   $renderCmd, 
						   $renderSvc,
						   $shoCmd);
		    
		    $scriptStr += `genFrameCleanupScript $i`;
		    $scriptStr += "\n";
		}
		if( $anim ) {
		    $scriptStr += ("\n      }\n");
		}
		$scriptStr += ("    \}\n");
	    }
	}
	$scriptStr += ("    \}\n");
    }

    if( $internalRender && $dochunking ) {
	$jobphasefilter = 3; // cleanup
	$scriptStr += genIntRenderTask($jobphasefilter,
				       $anim,
				       $start,
				       $end,
				       $by,
				       $cmdType,
				       $shoCmd,
				       $sceneFile);
    }


    $scriptStr += ("\n  \} -cleanup \{\n");
    // clean up stashed maya file
//     $scriptStr += `genJobCleanupScript`;
    $scriptStr += ("    File delete \"" + $sceneFile + "\"");
    $scriptStr += ("   \}\n");

    if( !$internalRender ) {
	// switch to defaultRenderLayer
	editRenderLayerGlobals -currentRenderLayer $renderLayers[0];
	// execute post mel script
	string $melScript = `getAttr defaultRenderGlobals.postMel`;
	if( $melScript != "" ) eval $melScript;
    }

    return $scriptStr;
}


// styles:
//     "mayabatch local" 
//     "mayabatch remote"
//     "local preview render"
//     "immediate rib, local render"
//     "deferred rib, remote render"
//     "remote rib, remote render"
global proc rmanWriteAlfredScript(string $style, string $scriptName,
				  int $chunk, string $args)
{
    int $contextWasOpen = `eval("rman ctxIsOpen")`;
    int $needContext = ($style == "local preview render" || 
			$style == "immediate rib, local render" || 
			$style == "deferred rib, remote render" ||
			$style == "remote rib, remote render");
    // some styles don't require context
    if( $needContext ) {
	if( !$contextWasOpen ) {
	    eval("rman ctxOpen -rib "+$args);
	}
    }

    int $fid = `fopen $scriptName "w"`;
    if( $fid == 0 ) {
	error( "Could not open Alfred script file: " + $scriptName);
	return;
    }
    string $envKey = "";
    if( `optionVar -exists "rmanAlfredEnvKey"` ) {
	$envKey = `optionVar -query "rmanAlfredEnvKey"`;
    }
    int $pbias = 0;
    if( `optionVar -exists "rmanAlfredPriority"` ) {
	$pbias = `optionVar -query "rmanAlfredPriority"`;
    }
    int $minp = 1;
    if( `optionVar -exists "rmanAlfredMinProcs"` ) {
	$minp = `optionVar -query "rmanAlfredMinProcs"`;
    }
    int $maxp = 3;
    if( `optionVar -exists "rmanAlfredMaxProcs"` ) {
	$maxp = `optionVar -query "rmanAlfredMaxProcs"`;
    }
    string $crews = "";
    if( `optionVar -exists "rmanAlfredCrews"` ) {
	$crews = `optionVar -query "rmanAlfredCrews"`;
    }
    string $service = "";
    if( `optionVar -exists "rmanAlfredService"` ) {
	$service = `optionVar -query "rmanAlfredService"`;
    }    
    string $donecmd = "";
    if( `optionVar -exists "rmanAlfredDoneCmd"` ) {
	$donecmd = `optionVar -query "rmanAlfredDoneCmd"`;
    }
    string $errcmd = "";
    if( `optionVar -exists "rmanAlfredErrorCmd"` ) {
	$errcmd = `optionVar -query "rmanAlfredErrorCmd"`;
    }
    string $extra = "";
    if( `optionVar -exists "rmanAlfredExtra"` ) {
	$extra = `optionVar -query "rmanAlfredExtra"`;
    }

    // Add one default mapping for converting maya -batch to mayabatch
    // on windows to avoid popping up a shell. mayabatch is only on windows.
    string $buf[];
    string $dirmapAttr = `rmanGetAttrName("searchpath:dirmap")`; 
    string $rmanGlobals = `rmanGetGlobals`;
    
    string $dirmapstr = "";
    if( `attributeExists $dirmapAttr $rmanGlobals` ) {
	$dirmapstr = `getAttr ($rmanGlobals + "." + $dirmapAttr)`;
    }

    $buf = `rmanGetProperty "settings:job" "Job" "searchpath:dirmap" "state"`;
    if( $buf[0] == "locked" ) {
	$buf = `rmanGetProperty "settings:job" "Job" "searchpath:dirmap" "default"`;
	$dirmapstr = $buf[0];
    }

    $dirmapstr = `substituteAllString $dirmapstr "[" ""`;
    tokenize($dirmapstr, "]", $buf);

    string $dirmaps = "";
    $dirmaps += "\n";
    $dirmaps += ("    {{maya -batch} {mayabatch} UNC}\n");

    int $i, $j;
    string $from, $to, $zone;
    for( $i=0; $i < size($buf); $i++ ) {
	string $triplet = $buf[$i];
	string $buf2[];
	tokenize($triplet, "\\\"", $buf2);
	$from = ""; $to = ""; $zone = "";
	for( $j=0; $j < size($buf2); $j++ ) {
	    string $tmp = `substituteAllString $buf2[$j] " " ""`;
	    $tmp = `strip $tmp`;
	    if( size($tmp) == 0 ) // skip tokens that are purely whitespace
		continue;
	    if( $zone == "" ) {
		$zone = $buf2[$j];
	    } else if( $from == "" ) {
		$from = $buf2[$j];
	    } else if( $to == "" ) {
		$to = $buf2[$j];
	    }
	}
	if( $zone == "" && $to == "" && $from == "" ) {
	    continue;
	}
	$dirmaps += ("    {{"+$from+"} {"+$to+"} "+$zone+"}\n");
    }


    fprint $fid "##AlfredToDo 3.0\n\n";
    fprint $fid ("Job -title {" + `rmanGetSceneName` + "} -dirmaps {"+$dirmaps+"} -envkey {"+$envKey+"} -pbias "+$pbias+" -crews {"+$crews+"} -service {"+$service+"} -whendone {"+$donecmd+"} -whenerror {"+$errcmd+"} "+$extra+" -serialsubtasks 1 -subtasks {\n");

    int $time = `currentTime -q`;
    string $script;
    string $jobCleanupScript = "";
    if( $style == "mayabatch local" ) {
	$script = `genRPSAlfredScript $chunk "Cmd" 0 1`;
    } else if( $style == "mayabatch remote" ) {
	$script = `genRPSAlfredScript $chunk "RemoteCmd" 0 1`;
    } else if( $style == "local preview render" ) {
	string $buf[] = `eval("rman getPref PreviewRenderCmd")`;
	string $renderCmd = `stringArrayToString $buf " "`;
	if( `optionVar -exists "rmanNumBatchThreads"` ) {
	    $nthreads = `optionVar -query "rmanNumBatchThreads"`;
	    $renderCmd = `substitute "-t:0" $renderCmd ("-t:"+$nthreads)`;
	}
	$buf = `eval("rman getPref PreviewRenderSvc")`;
	string $renderSvc = `stringArrayToString $buf " "`;
	string $minmax="";
	if( `gmatch $renderCmd "*netrender*"` ) {
	    $minmax = ("-atleast "+$minp+" -atmost "+$maxp);
	}
	$script = `genSubframeAlfredScript "/Job" 0 $time ("Cmd "+$minmax+" -service {"+$renderSvc+"}") $renderCmd`;
 	$jobCleanupScript = `genJobCleanupScript`;
    } else if( $style == "immediate rib, local render" ) {
	string $buf[] = `eval("rman getPref LocalRenderCmd")`;
	string $renderCmd = `stringArrayToString $buf " "`;
	if( `optionVar -exists "rmanNumBatchThreads"` ) {
	    $nthreads = `optionVar -query "rmanNumBatchThreads"`;
	    $renderCmd = `substitute "-t:0" $renderCmd ("-t:"+$nthreads)`;
	}
	$buf = `eval("rman getPref LocalRenderSvc")`;
	string $renderSvc = `stringArrayToString $buf " "`;
	$script = `genLayerAlfredScript "/Job" $time ("Cmd -service {"+$renderSvc+"}") $renderCmd`;	
 	$jobCleanupScript = `genJobCleanupScript`;
    } else if( $style == "deferred rib, remote render" ) {
	$script = `genRPSAlfredScript $chunk "RemoteCmd" 0 0`;
 	$jobCleanupScript = `genJobCleanupScript`;
    } else if( $style == "remote rib, remote render" ) {
	$script = `genRPSAlfredScript $chunk "RemoteCmd" 1 0`;
 	$jobCleanupScript = `genJobCleanupScript`;
    }
    fprint $fid $script;
    fprint $fid "}";
    fprint $fid $jobCleanupScript;
    fprint $fid "\n";
    fclose $fid;

    if( $needContext ) {
	if( !$contextWasOpen ) {
	    eval("rman ctxClose");	
	}
    }
}

// rmanWriteAlfredScript("RPS remote","C:/temp/alfspool/foo.alf", 5, "");
