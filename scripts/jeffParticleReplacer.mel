// jeffParticleReplacer.mel
//
// Replaces particles with geometry V1.0
//
// Select Particle Shape Node first, then geometry Node to replace with

// Global Variables
//
//
// Jeff's Particle Replacer V1.0 Instructions
// To Install: 
//  
// Put the script (jeffParticleReplacer.mel) into your script search path for Maya.
// For personal use this is usually the sub-directory maya/scripts under your home directory. 
// To make the script available system-wide, place it in /usr/aw/maya/scripts/unsupported. 
// Restart Maya.  You can make a button to call the script in Maya easily. 
// Open the script Editor window. Type jeffParticleReplacer(); in the lower window. 
// Then select the text with the mouse and drag it onto your shelf with the middle mouse button.
//
// To Use: 
//
// The script requires you to have two objects selected. The first must be a particle object, 
// the second the geometry to replace the particles with. ie: 
//       1. Create a particle emitter (Particles->Create Emitter) 
//       2. Change rate to 20, speed to 5. Playback 
//       3. Create a Cone (Primitives->Create Nurbs->Cone)
//       4. Select the particles
//       5. Shift-Select the cone
//       6. Type jeffParticleReplacer(); (or press button made earlier)
//
// The options:
//
// The GUI provides a series of sliders and checkbox for setting various options within the script.
// These are: 
// - Start/End Time: Time to do the replace over. You can use the animation time
//                   Slider values if you wish.
// - MaxParticles: Maximum number of particles to replace. See Bugs below
// - Random Scale: Randomly scales geometry between zero and range value of slider
// - Random Twist: Randomly twists geometry around up Axis of geometry. This is currently assumed to 
//                 be Y, unless the Align Axis (see below) is set to Y in which case the up axis is 
//                 assumed to be Z.
// - Align: Aligns the geometry to the path of the particle along the Align Axis.
// - Align Axis: Sets the axis for alignment of geometry. Up axis is assumed to be Y unless Y is 
//   align axis in which case up axis is assumed to be Z.
// - Delete Particles: Removes the particles after doing the replace which provides faster playback.
// - Do It: This button starts the Particle Replacement process going
// - Reset: This button resets all values to the defaults
// - Cancel: Pops down Particle Replace window
//
// Bugs:
// 
// There seems to be a bug which is causing some problems in determining the exit condition 
// for the script. Specifically, a select command followed by a ls command is returning an 
// empty set when it shouldn't which causes the script to think it has reached the end of the
// particle list. If this bugs occurs (and it IS intermittent) you will normally see only
// one particle replaced. To workaroudn this, use the Max Particles slider to set a limit. 
// If this slider is set to a non-zero value, it is used instead of the select/ls combination
// to determine the number of particles to replace.

  
global int $startTime;
global int $endTime;
global int $laststartTime;
global int $lastEndTime;
global int $maxParticles;
global float $scaleV;
global int $twistV;

// Callback Routines for UI

global proc checkTimeS()

{
  global int $laststartTime, $lastEndTime;
  global int $startTime;
  global int $endTime;

  if (`checkBox -q -v chk1`) {
    //$startTime = `optionVar -q timeSliderMin`;
    //$endTime = `optionVar -q timeSliderMax`; 
    $laststartTime = $startTime;
    $lastEndTime = $endTime;
    $startTime = `playbackOptions -q -min`;
    $endTime = `playbackOptions -q -max`;
    intSliderGrp -e -en false -v $startTime startTimeSlider;
    intSliderGrp -e -en false -v $endTime endTimeSlider;
  } else {
    $startTime = $laststartTime;
    $endTime = $lastEndTime;
    intSliderGrp -e -en true -v $startTime startTimeSlider;
    intSliderGrp -e -en true -v $endTime endTimeSlider;
  }
  //print("New Start: " + $startTime + " New End: " + $endTime + "\n");
}

global proc fldTimeS()

{
  global int $startTime;

  $startTime = `intSliderGrp -q -v startTimeSlider`;
}

global proc fldTimeE()

{
  global int $endTime;

  $endTime = `intSliderGrp -q -v endTimeSlider`;
}

global proc fldMaxP()

{
  global int $maxParticles;

  $maxParticles = `intSliderGrp -q -v maxPSlider`;
}

global proc checkRandomS()

{
  global float $scaleV;

  if (`checkBox -q -v chk2`) {
    floatSliderGrp -e -en true -v $scaleV scaleSlider;
  } else {
    floatSliderGrp -e -en false -v $scaleV scaleSlider;
    $scaleV = 1.0;
  }
}

global proc fldScaleV()

{
  global float $scaleV;

  $scaleV = `floatSliderGrp -q -v scaleSlider`;
}

global proc checkRandomT()

{
  global int $twistV;

  if (`checkBox -q -v chk3`) {
    intSliderGrp -e -en true -v $twistV twistSlider;
  } else {
    intSliderGrp -e -en false -v $twistV twistSlider;
    $twistV = 0;
  }
}

global proc fldtwistV()

{
  global int $twistV;

  $twistV = `intSliderGrp -q -v twistSlider`;
}

global proc checkAlign()

{
  if (`checkBox -q -v chk4`) {
    radioButtonGrp -e -en true rbg;
  } else {
    radioButtonGrp -e -en false rbg;
  }
}

// doReplace - Where the work gets done
//

global proc doReplace()

{
  global int $startTime;
  global int $endTime;
  global int $maxParticles;
  global float $scaleV;
  global int $twistV;

  string $selectionList[];
  float $v[],$w[];
  int $i, $j, $k;
  string $command, $cname, $oname[];
  string $buf2[];


  string $buffer[];
  string $thepart; 
  $lastone = false;

  $selectionList = `ls -sl`;
  
  if ($endTime <= $startTime)
    error("Start Time must be > End Time");

  // Iterate over particles

  for ($j = 0; true; $j++) {
    print("Doing Particle " + $j + "\n");
    $thepart = ($selectionList[0] + ".pt[" + $j + "]");
    currentTime $startTime;
    $command = ("select -r " + $thepart); 
    eval $command; 
    //print("cm:" + $command + "\n");
    $v = `getParticleAttr -at position $thepart`;
    $buffer = `ls -sl`; 
    //print("sel: sz " + size($buffer) + " " + $buffer[0] + "\n");
    int $h = tokenize($buffer[0],"[]",$buf2);
    $cname = ($j);
    if ($maxParticles > 0) {
      if ($j == ($maxParticles-1))
        $lastone = true;
    } else {
      if ($cname != $buf2[1])
        $lastone = true;
    }
    currentTime ($startTime+1);
    $command = ("select -r " + $thepart); eval $command;
    $w = `getParticleAttr -at position $thepart`;
    $command = ("curve -d 1 -p " + $v[0] + " " + $v[1] + " " + $v[2] + " -p " + $w[0] + " " + $w[1] + " " + $w[2]);
    //print($command + "\n");
    $cname = `eval $command`;
    //print($cname + "\n");

    for ($i = $startTime+2; $i <= $endTime; $i++) {
      //print("Time: " + $i + "\n");
      currentTime $i;
      $command = ("select -r " + $thepart); eval $command;
      $v = `getParticleAttr -at position $thepart`;
      $command = ("curve -a -p " + $v[0] + " " + $v[1] + " " + $v[2] + " " + $cname);
      //print($command + "\n");
      eval $command;
    }
    $command = ("duplicate " + $selectionList[1]); 
    $oname = `eval $command`; 
    //print("on: " + $oname[0] + "\n");

    // Scale

    if (`checkBox -q -v chk2`) {
      float $sv = rand($scaleV);
      //print("Scaling by " + $sv + "\n");
      $command = ("scale -r " + $sv + " " + $sv + " " + $sv + " " + $oname[0]);
      eval $command;
    }

    // Twist
    // This is a q&d fixed twist by rotating geometry
    // Later replace with proper twist motion along path + "wobble" parametrer

    if (`checkBox -q -v chk3`) {
      float $tv = rand($twistV);
      //print("twisting by " + $tv + "degrees\n");
      if (`checkBox -q -v chk4`)
        $command = ("rotate -r 0 " + $tv + " 0 " + $oname[0]);
      else {
        $k = `radioButtonGrp -q -sl rbg`;
        switch($k) {
          case 1: $command = ("rotate -r " + $tv + " 0 0 " + $oname[0]); break;
          case 2: $command = ("rotate -r 0 " + $tv + " 0 " + $oname[0]); break;
          case 3: $command = ("rotate -r 0 0 " + $tv + " " + $oname[0]); break;
        }
      }
      eval $command;
    }

    // Align
    // Assume Y up unless Y is follow axis (then assume Z up)
    // Note: Doco is incorrect. There is no -f (follow) option.

    string $alcmd = "";

    if (`checkBox -q -v chk4`) {
      $k = `radioButtonGrp -q -sl rbg`;
      switch($k) {
        case 1: // X Axis
          $alcmd = " -fa x -ua y ";
          break;
        case 2:
          $alcmd = " -fa y -ua z ";
          break;
        case 3:
          $alcmd = " -fa z -ua y ";
          break;
      }


    }

    $command = ("pathAnimation -stu " + $startTime + " -etu " + $endTime + " " + $alcmd + $oname[0] + " " + $cname); eval $command;
    if ($lastone == true)
      break;
  } 

  if (`checkBox -q -v chk5`) {
    print("Deleting Particles");
    $command = ("pickWalk -d up " + $selectionList[0]);
    eval $command;
    $command = ("delete");
    eval $command;
  }

  print ("done\n");
}

global proc doReset()

{
  global int $startTime;
  global int $endTime;
  global int $laststartTime;
  global int $lastEndTime;
  global int $maxParticles;
  global float $scaleV;
  global int $twistV;

  $startTime = $laststartTime = 1;
  $endTime = $lastEndTime = 25;
  $maxParticles = 0;
  $scaleV = 1.0;
  $twistV = 0;

  checkBox -e -v false chk1;
  checkBox -e -v false chk2;
  checkBox -e -v false chk3;
  checkBox -e -v false chk4;
  checkBox -e -v false chk5;

  intSliderGrp -e -en true -v $startTime startTimeSlider;
  intSliderGrp -e -en true -v $endTime endTimeSlider;
  intSliderGrp -e -en true -v $maxParticles maxPSlider;
  floatSliderGrp -e -en false -v $scaleV scaleSlider;
  intSliderGrp -e -en false -v $twistV twistSlider;
  radioButtonGrp -e -en false -sl 2 rbg;
}

// Main Procedure - Call this 
//
// Builds Window

global proc jeffParticleReplacer()

{
  string $selectionList[];
  int $len;

  $selectionList = `ls -sl`;
  $len = size($selectionList);
  if ($len != 2)
    error "Must pick two objects: particles and geometry";

  if (`window -ex jeffParticleReplacerWin`)
    deleteUI jeffParticleReplacerWin;
  window -title "Jeff's Particle Replacer" jeffParticleReplacerWin;
  columnLayout rcl1;

  intSliderGrp -l "Start Time: " -cc fldTimeS -f true startTimeSlider;
  intSliderGrp -l "End Time: " -cc fldTimeE -f true endTimeSlider;
  checkBox -l "Use Time Slider" -cc checkTimeS -v false chk1;
  intSliderGrp -l "Max Particles: " -cc fldMaxP -f true maxPSlider;
  separator -style "single";

  checkBox -l "Random Scale" -cc checkRandomS -v false chk2;
  floatSliderGrp -l "Scale Range: " -cc fldScaleV -f true scaleSlider;
  separator -style "single";

  checkBox -l "Random Twist" -cc checkRandomT -v false chk3;
  intSliderGrp -l "Twist Range: " -min 0 -max 360 -cc fldtwistV -f true twistSlider;
  separator -style "single";

  checkBox -l "Align Geometry" -cc checkAlign -v false chk4;
  radioButtonGrp -l "Align Axis: " -nrb 3 -la3 "X" "Y" "Z" -sl 2 rbg;
  separator -style "single";

  checkBox -l "Delete Particles" -v false chk5;
  separator -style "double";

  rowLayout -nc 3;
  button -l "Do it" -c doReplace but1;
  button -l "Reset" -c doReset but2;
  button -l "Cancel" -c "evalDeferred \"deleteUI jeffParticleReplacerWin\";";

  doReset();
  showWindow jeffParticleReplacerWin;
}